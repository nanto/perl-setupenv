# -*- Makefile -*-

# Makefile.setupenv - Setup local Perl environment for development

# Copyright 2012 Hatena <http://www.hatena.com/>.
# Copyright 2012 Wakaba <w@suika.fam.cx>.

# Repository: <https://github.com/wakaba/perl-setupenv>.
# Document: <https://github.com/wakaba/perl-setupenv/blob/master/README>.
# Usage: <https://raw.github.com/wakaba/perl-setupenv/master/Makefile>.

PERL = perl
PERL_VERSION = latest
PERLBREW_PARALLEL_COUNT = 1
CARTON = local/perl-$(PERL_VERSION)/carton/bin/carton
CARTON_ABS = $(abspath $(CARTON))
CARTON_LIB = $(abspath local/perl-$(PERL_VERSION)/carton/lib/perl5)
CARTON_SUPPORT_BIN_PATH = $(abspath local/perl-$(PERL_VERSION)/carton/bin)
CPANM = $(PERL) $(CARTON_SUPPORT_BIN_PATH)/cpanm
CPANM_MIRROR_OPTS = \
    --mirror $(abspath local/pmbundler/mirror) \
    --mirror http://search.cpan.org/CPAN \
    --mirror http://cpan.metacpan.org/ \
    --mirror http://backpan.perl.org/
CPANM_ = $(CPANM) --notest --verbose -l local/perl-$(PERL_VERSION)/carton \
    $(CPANM_MIRROR_OPTS)
SETUPENV_CPANM_OPTS = $(CPANM_MIRROR_OPTS)
PERL_PATH = $(abspath local/perlbrew/perls/perl-$(PERL_VERSION)/bin)
CARTON_ENV = PERL5LIB=$(CARTON_LIB) PATH=$(PERL_PATH):$(CARTON_SUPPORT_BIN_PATH):$(PATH) PERL_CARTON_PATH=local/perl-$(PERL_VERSION) SETUPENV_CPANM_OPTS="$(SETUPENV_CPANM_OPTS)"
PERL_ENV = PATH=$(abspath local/perl-$(PERL_VERSION)/bin):$(PERL_PATH):$(PATH) PERL5LIB=`cat config/perl/libs.txt`
SSH = ssh

REMOTEDEV_HOST = develop.test
REMOTEDEV_PERL_VERSION = latest

SETUPENV_CURRENT_REVISION = 20120333
SETUPENV_MIN_REVISION = $(SETUPENV_CURRENT_REVISION)

all:

# ------ setupenv - Development environment setup tool ------

setupenv-update:
ifeq "$(sort $(SETUPENV_CURRENT_REVISION) $(SETUPENV_MIN_REVISION))" "$(SETUPENV_CURRENT_REVISION) $(SETUPENV_MIN_REVISION)"
#$(SETUPENV_CURRENT_REVISION) < $(SETUPENV_MIN_REVISION)
	wget -O Makefile.setupenv https://raw.github.com/wakaba/perl-setupenv/master/Makefile.setupenv
endif

local/setupenv/carton.20120328:
	mkdir -p local/setupenv
	touch $@

# ------ local-perl - Perl installation for your application ------

local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version:
	mkdir -p local/perlbrew/_perlinfo
ifeq "$(PERL_VERSION)" "latest"
	wget -O local/perlbrew/_perlinfo/JSON.sh https://raw.github.com/dominictarr/JSON.sh/master/JSON.sh
	wget -O local/perlbrew/_perlinfo/perl.json http://api.metacpan.org/release/perl
	cat local/perlbrew/_perlinfo/perl.json \
	    | sh local/perlbrew/_perlinfo/JSON.sh \
	    | grep "\[\"name\"\]" \
	    | sed 's/\["[^"]\+"\]\s\+"\([^"]\+\)"/\1/g' > $@
else
	perl -e "print 'perl-$(PERL_VERSION)'" > $@
endif

local/perlbrew/bin/perlbrew:
	mkdir -p local/
	wget -O local/install.perlbrew http://install.perlbrew.pl/
	PERLBREW_ROOT=$(abspath local/perlbrew) sh local/install.perlbrew

local-perl: local-perl-main $(CARTON_SUPPORT_BIN_PATH)/cpanm

local-perl-main: local/perlbrew/perls/perl-$(PERL_VERSION)/bin/perl

local/perlbrew/perls/perl-$(PERL_VERSION)/bin/perl: local/perlbrew/bin/perlbrew \
    local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version
ifeq "$(PERL_VERSION)" "latest"
	-PERLBREW_ROOT=$(abspath local/perlbrew) local/perlbrew/bin/perlbrew \
	    alias delete perl-latest
endif
	PERLBREW_ROOT=$(abspath local/perlbrew) local/perlbrew/bin/perlbrew \
	    install `cat local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version` \
	    --notest --as `cat local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version` -j $(PERLBREW_PARALLEL_COUNT)
ifeq "$(PERL_VERSION)" "latest"
	PERLBREW_ROOT=$(abspath local/perlbrew) local/perlbrew/bin/perlbrew \
	    alias create `cat local/perlbrew/_perlinfo/perl-$(PERL_VERSION).version` perl-latest
endif

perl-exec: config/perl/libs.txt
	$(PERL_ENV) $(PERL) $(PERL_EXEC_ARGS)

perl-version: config/perl/libs.txt
	$(PERL_ENV) $(PERL) -v
	$(PERL_ENV) $(PERL) -e 'print for map { $$_ . "\n" } @INC'

# ------ carton - Perl module management ------

cpanm: $(CARTON_SUPPORT_BIN_PATH)/cpanm

carton: $(CARTON_SUPPORT_BIN_PATH)/carton

$(CARTON_SUPPORT_BIN_PATH)/real-cpanm:
	mkdir -p $(CARTON_SUPPORT_BIN_PATH)
	wget -O $@ http://cpanmin.us
	chmod u+x $@

$(CARTON_SUPPORT_BIN_PATH)/cpanm: $(CARTON_SUPPORT_BIN_PATH)/real-cpanm
	echo "#!/bin/sh" > $@
	echo "$(CARTON_SUPPORT_BIN_PATH)/real-cpanm \$$SETUPENV_CPANM_OPTS \$$*" >> $@
	chmod u+x $@

$(CARTON_SUPPORT_BIN_PATH)/carton: $(CARTON_SUPPORT_BIN_PATH)/cpanm \
    local/setupenv/carton.20120328
	$(CARTON_ENV) $(CPANM_) --reinstall ExtUtils::ParseXS
	$(CARTON_ENV) $(CPANM_) CPAN 
	mkdir -p $(CARTON_SUPPORT_BIN_PATH)/../lib/perl5/CPAN/
	echo "yes\nlocal::lib\n" | \
	    $(CARTON_ENV) perl -MCPAN -MCPAN::HandleConfig \
	    -e 'CPAN::HandleConfig->load; CPAN::HandleConfig->commit("$(CARTON_SUPPORT_BIN_PATH)/../lib/perl5/CPAN/MyConfig.pm")'
	$(CARTON_ENV) $(CPANM_) JSON::XS Getopt::Long \
	    Class::Data::Inheritable Devel::StackTrace
#	    Dist::Metadata::Archive \
#	    inc::Module::Install Module::Install::ReadmeFromPod \
#	    Module::Install::Repository
	#git clone git://github.com/masaki/carton.git $(CARTON_SUPPORT_BIN_PATH)/../carton || (cd $(CARTON_SUPPORT_BIN_PATH)/../carton && git pull)
	#$(CARTON_ENV) $(CPANM_) --reinstall $(CARTON_SUPPORT_BIN_PATH)/../carton
	$(CARTON_ENV) $(CPANM_) --reinstall Carton
	#ln -s $(CARTON_SUPPORT_BIN_PATH)/../carton/bin/carton $@
	touch -c $@

config/perl/modules.txt:
	mkdir -p config/perl
	echo Carp > $@

config/perl/submodules.txt:
	mkdir -p config/perl
	touch $@

local/submodules/Makefile: config/perl/submodules.txt
	mkdir -p local/submodules
	echo "clone:" > $@
	cat $< | perl -n -e 'chomp; undef $$branch; $$branch = $$1 if s{\s+(\S+)\s*$$}{}; m{([^/\s]+)$$}; $$dir = $$1; print "\t(git clone $$_ || (cd $$dir && git pull))\n"; print "\tcd $$dir && (git checkout -b $$branch origin/$$branch || git checkout $$branch)\n" if $$branch' >> $@

local-submodules: local/submodules/Makefile
	cd local/submodules && $(MAKE) clone

config/perl/libs.txt: $(CARTON_SUPPORT_BIN_PATH)/carton local-submodules
	mkdir -p config/perl
	$(CARTON_ENV) $(PERL) $(CARTON) exec -- \
	    $(PERL) -e 'push @INC, glob "local/submodules/*/lib"; print join ":", grep /^local/, @INC' > $@

carton-install: local-submodules carton.lock carton-install-main

carton.lock: $(CARTON_SUPPORT_BIN_PATH)/carton \
    config/perl/modules.txt \
    $(wildcard config/perl/modules.txt \
	       config/perl/modules.*.txt \
               modules/*/config/perl/modules.txt \
	       modules/*/config/perl/modules.*.txt \
	       local/submodules/*/config/perl/modules.txt \
	       local/submodules/*/config/perl/modules.*.txt)
	-cat config/perl/modules.txt config/perl/modules.*.txt \
	    modules/*/config/perl/modules.txt \
	    modules/*/config/perl/modules.*.txt \
	    local/submodules/*/config/perl/modules.txt \
	    local/submodules/*/config/perl/modules.*.txt | \
	$(CARTON_ENV) xargs $(PERL) $(CARTON) install

carton-update: $(CARTON_SUPPORT_BIN_PATH)/carton \
    config/perl/modules.txt \
    $(wildcard config/perl/modules.txt \
	       config/perl/modules.*.txt \
               modules/*/config/perl/modules.txt \
	       modules/*/config/perl/modules.*.txt \
	       local/submodules/*/config/perl/modules.txt \
	       local/submodules/*/config/perl/modules.*.txt)
	-cat config/perl/modules.txt config/perl/modules.*.txt \
	    modules/*/config/perl/modules.txt \
	    modules/*/config/perl/modules.*.txt \
	    local/submodules/*/config/perl/modules.txt \
	    local/submodules/*/config/perl/modules.*.txt | \
	$(CARTON_ENV) xargs $(PERL) $(CARTON) install

carton-install-main:
	-$(CARTON_ENV) $(PERL) $(CARTON) install --deployment

carton-install-module: $(CARTON_SUPPORT_BIN_PATH)/carton
	$(CARTON_ENV) $(PERL) $(CARTON) install \
	    $(CARTON_INSTALL_MODULE)

# ------ pmbundler - Perl package repository mirroring ------

# Document: doc/pmbundler.txt

PMBUNDLER_CPANM_ = $(CPANM) --notest -l local/pmbundler/install \
    $(CPANM_MIRROR_OPTS) --reinstall
PMBUNDLER_REPO_URL = 

local/pmbundler/deps.txt: carton.lock
	mkdir -p local/pmbundler
	$(CARTON_ENV) perl -MJSON::XS -e 'local $$/ = undef; my $$json = JSON::XS->new->utf8->decode(<>); my @list; for (values %{$$json->{modules}}) { push @list, $$_->{module} . "~" . $$_->{version}; } @list = sort @list; print $$_, "\n" for @list' $< > $@

pmbundler-repo-update:
	mkdir -p local/pmbundler/mirror
ifeq "$(PMBUNDLER_REPO_URL)" ""
else
	cd local/pmbundler && ((git clone $(PMBUNDLER_REPO_URL) mirror) || (cd mirror && git pull))
endif

pmbundler-install: local/pmbundler/deps.txt pmbundler-repo-update
	mkdir -p local/pmbundler/install
	cat local/pmbundler/deps.txt | \
	    $(CARTON_ENV) xargs -l30 -- $(PMBUNDLER_CPANM_)

pmbundler-install-module: pmbundler-repo-update
	mkdir -p local/pmbundler/install
	$(CARTON_ENV) $(PMBUNDLER_CPANM_) $(PMBUNDLER_INSTALL_MODULE)

# ------ remotedev - Run tests at remote host ------

REMOTEDEV_PMBUNDLER_REPO_URL = $(PMBUNDLER_REPO_URL)

local/remotedev/remote-directory-name.txt:
	mkdir -p local/remotedev
	$(SSH) $(REMOTEDEV_HOST) "perl -MFile::Temp=tempdir -e 'print tempdir'" > $@

config/remotedev/getreponame.pl:
	mkdir -p config/remotedev
	echo 'my $$repo = `git config --get remote.origin.url` or die "No origin URL";' > $@
	echo '$$repo =~ s{git\@github.com:}{git://github.com/};' >> $@
	echo '$$repo =~ tr/\x0D\x0A//d;' >> $@
	echo 'print $$repo;' >> $@

remotedev-upload: local/remotedev/remote-directory-name.txt config/remotedev/getreponame.pl
	$(SSH) $(REMOTEDEV_HOST) "mkdir -p $(shell cat local/remotedev/remote-directory-name.txt) && cd $(shell cat local/remotedev/remote-directory-name.txt) && ((git clone $(shell $(PERL) config/remotedev/getreponame.pl) repo && cd repo && git checkout -b $(shell git name-rev --name-only HEAD) origin/$(shell git name-rev --name-only HEAD) && git submodule update --init) || (cd repo && (git checkout -b $(shell git name-rev --name-only HEAD) origin/$(shell git name-rev --name-only HEAD) || git checkout $(shell git name-rev --name-only HEAD)) && git pull && git submodule update --init))";

remotedev-setup: remotedev-upload
	$(SSH) $(REMOTEDEV_HOST) "cd $(shell cat local/remotedev/remote-directory-name.txt)/repo && make Makefile.setupenv PERL_VERSION=$(REMOTEDEV_PERL_VERSION) && make --makefile Makefile.setupenv setupenv-update SETUPENV_MIN_REVISION=$(SETUPENV_CURRENT_REVISION) && make --makefile Makefile.setupenv local-perl pmbundler-repo-update carton-install PERL_VERSION=$(REMOTEDEV_PERL_VERSION) PMBUNDLER_REPO_URL=$(PMBUNDLER_REPO_URL)";

remotedev-reset:
	rm local/remotedev/remote-directory-name.txt

remotedev-reset-setupenv:
	$(SSH) $(REMOTEDEV_HOST) "cd $(shell cat local/remotedev/remote-directory-name.txt)/repo && rm Makefile.setupenv"

remotedev-test: remotedev-setup
	$(SSH) $(REMOTEDEV_HOST) "cd $(shell cat local/remotedev/remote-directory-name.txt)/repo && make test PERL_VERSION=$(REMOTEDEV_PERL_VERSION) PMBUNDLER_REPO_URL=$(REMOTEDEV_PMBUNDLER_REPO_URL)"

# ------ generatepm - Generate Perl module package distributions ------

generatepm: local/generatepm/bin/generate-pm-package

local/generatepm/bin/generate-pm-package: always
	mkdir -p local
	git clone git://github.com/wakaba/generate-pm-package.git local/generatepm || (cd local/generatepm && git pull)
	cd local/generatepm && git submodule update --init
	cd local/generatepm && $(MAKE) all

# ------ ------

always: